services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - '15672:15672'
    env_file:
      - .env
    networks:
      - crimmit_network
    healthcheck:
      test: ['CMD', 'rabbitmqctl', 'status']
      interval: 10s
      timeout: 5s
      retries: 5

  # mongoDB
  mongoDB:
    container_name: mongoDB
    image: mongo:latest
    ports:
      - 27017:27017
    networks:
      - crimmit_network

  # mongo-express
  mongo-express:
    container_name: mongo-express
    image: mongo-express
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongoDB
      - ME_CONFIG_MONGODB_PORT=27017
    depends_on:
      - mongoDB
    networks:
      - crimmit_network
    ports:
      - 8081:8081

  owner-service:
    build:
      context: ./
      dockerfile: ./apps/owner-service/Dockerfile
      target: dev
    env_file:
      - .env
    environment:
      - STAGE=dev
      - RABBITMQ_HOST=rabbitmq:5672
      - MONGO_HOST=mongoDB
    depends_on:
      - rabbitmq
      - mongoDB
      - product-service
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: yarn start:dev owner-service
    networks:
      - crimmit_network

  product-service:
    build:
      context: ./
      dockerfile: ./apps/product-service/Dockerfile
      target: dev
    env_file:
      - .env
    environment:
      - STAGE=dev
      - RABBITMQ_HOST=rabbitmq:5672
      - MONGO_HOST=mongoDB
    depends_on:
      - rabbitmq
      - mongoDB
      - order-service
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: yarn start:dev product-service
    networks:
      - crimmit_network

  order-service:
    build:
      context: ./
      dockerfile: ./apps/order-service/Dockerfile
      target: dev
    env_file:
      - .env
    environment:
      - STAGE=dev
      - RABBITMQ_HOST=rabbitmq:5672
      - MONGO_HOST=mongoDB
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongoDB:
        condition: service_started
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: yarn start:dev order-service
    networks:
      - crimmit_network

  api:
    build:
      context: ./
      dockerfile: ./apps/api/Dockerfile
      target: dev
    ports:
      - '3000:3000'
    env_file:
      - .env
    environment:
      - STAGE=dev
      - RABBITMQ_HOST=rabbitmq:5672
      - MONGO_HOST=mongoDB
    depends_on:
      - rabbitmq
      - mongoDB
      - product-service
      - owner-service
      - order-service
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - crimmit_network
    command: yarn start:dev api

networks:
  crimmit_network:
    driver: bridge

volumes:
  rabbitmq_data:
